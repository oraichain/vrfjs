/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {Uint128, Binary, InstantiateMsg, Coin, MemberMsg, ExecuteMsg, SharedDealerMsg, SharedRowMsg, ShareSigMsg, QueryMsg, MigrateMsg, SharedStatus, Config, DistributedShareData, ShareSig, Member, ArrayOfMember, ArrayOfDistributedShareData, Boolean} from "./Vrfdkg.types";
export interface VrfdkgReadOnlyInterface {
  contractAddress: string;
  contractInfo: () => Promise<Config>;
  getRound: ({
    round
  }: {
    round: number;
  }) => Promise<DistributedShareData>;
  getMember: ({
    address
  }: {
    address: string;
  }) => Promise<Member>;
  getMembers: ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: string;
    order?: number;
  }) => Promise<ArrayOfMember>;
  latestRound: () => Promise<DistributedShareData>;
  getRounds: ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: number;
    order?: number;
  }) => Promise<ArrayOfDistributedShareData>;
  currentHandling: () => Promise<DistributedShareData>;
  verifyRound: () => Promise<Boolean>;
}
export class VrfdkgQueryClient implements VrfdkgReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.contractInfo = this.contractInfo.bind(this);
    this.getRound = this.getRound.bind(this);
    this.getMember = this.getMember.bind(this);
    this.getMembers = this.getMembers.bind(this);
    this.latestRound = this.latestRound.bind(this);
    this.getRounds = this.getRounds.bind(this);
    this.currentHandling = this.currentHandling.bind(this);
    this.verifyRound = this.verifyRound.bind(this);
  }

  contractInfo = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      contract_info: {}
    });
  };
  getRound = async ({
    round
  }: {
    round: number;
  }): Promise<DistributedShareData> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_round: {
        round
      }
    });
  };
  getMember = async ({
    address
  }: {
    address: string;
  }): Promise<Member> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_member: {
        address
      }
    });
  };
  getMembers = async ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: string;
    order?: number;
  }): Promise<ArrayOfMember> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_members: {
        limit,
        offset,
        order
      }
    });
  };
  latestRound = async (): Promise<DistributedShareData> => {
    return this.client.queryContractSmart(this.contractAddress, {
      latest_round: {}
    });
  };
  getRounds = async ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: number;
    order?: number;
  }): Promise<ArrayOfDistributedShareData> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_rounds: {
        limit,
        offset,
        order
      }
    });
  };
  currentHandling = async (): Promise<DistributedShareData> => {
    return this.client.queryContractSmart(this.contractAddress, {
      current_handling: {}
    });
  };
  verifyRound = async (): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      verify_round: {}
    });
  };
}
export interface VrfdkgInterface extends VrfdkgReadOnlyInterface {
  contractAddress: string;
  sender: string;
  shareDealer: ({
    share
  }: {
    share: SharedDealerMsg;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  shareRow: ({
    share
  }: {
    share: SharedRowMsg;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  requestRandom: ({
    input
  }: {
    input: Binary;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  shareSig: ({
    share
  }: {
    share: ShareSigMsg;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateFees: ({
    fee
  }: {
    fee: Coin;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  reset: ({
    members,
    threshold
  }: {
    members?: MemberMsg[];
    threshold?: number;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  forceNextRound: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class VrfdkgClient extends VrfdkgQueryClient implements VrfdkgInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.shareDealer = this.shareDealer.bind(this);
    this.shareRow = this.shareRow.bind(this);
    this.requestRandom = this.requestRandom.bind(this);
    this.shareSig = this.shareSig.bind(this);
    this.updateFees = this.updateFees.bind(this);
    this.reset = this.reset.bind(this);
    this.forceNextRound = this.forceNextRound.bind(this);
  }

  shareDealer = async ({
    share
  }: {
    share: SharedDealerMsg;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      share_dealer: {
        share
      }
    }, _fee, _memo, _funds);
  };
  shareRow = async ({
    share
  }: {
    share: SharedRowMsg;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      share_row: {
        share
      }
    }, _fee, _memo, _funds);
  };
  requestRandom = async ({
    input
  }: {
    input: Binary;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      request_random: {
        input
      }
    }, _fee, _memo, _funds);
  };
  shareSig = async ({
    share
  }: {
    share: ShareSigMsg;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      share_sig: {
        share
      }
    }, _fee, _memo, _funds);
  };
  updateFees = async ({
    fee
  }: {
    fee: Coin;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_fees: {
        fee
      }
    }, _fee, _memo, _funds);
  };
  reset = async ({
    members,
    threshold
  }: {
    members?: MemberMsg[];
    threshold?: number;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      reset: {
        members,
        threshold
      }
    }, _fee, _memo, _funds);
  };
  forceNextRound = async (_fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      force_next_round: {}
    }, _fee, _memo, _funds);
  };
}